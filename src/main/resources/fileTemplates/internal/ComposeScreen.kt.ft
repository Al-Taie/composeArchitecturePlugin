package ${PACKAGE_NAME}

import androidx.compose.runtime.getValue
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import org.jetbrains.compose.ui.tooling.preview.Preview
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import ${BASE_PACKAGE_NAME}.utils.extensions.Listen


@Composable
fun ${NAME}Screen(
    viewModel: ${NAME}ViewModel
) {
    val state: ${NAME}UiState by viewModel.state.collectAsStateWithLifecycle()
    val event: ${NAME}Event? by viewModel.event.collectAsState(null)
    val contract: ${NAME}Contract = viewModel

    Content(
        state = state,
        contract = contract
    )

    event?.Listen { currentEvent ->
        when (currentEvent) {
            else -> {}
        }
    }
}


@Composable
private fun Content(
    state: ${NAME}UiState = ${NAME}UiState(),
    contract: ${NAME}Contract = ${NAME}Contract.${NAME}ContractPreview
) {

}


@Preview
@Composable
private fun Preview() {
    ${NAME}ScreenContent()
}
