package ${PACKAGE_NAME}

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import co.touchlab.kermit.Logger
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.CoroutineStart
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.IO
import kotlinx.coroutines.Job
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asSharedFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.flow.takeWhile
import kotlinx.coroutines.launch
import kotlin.coroutines.CoroutineContext
import kotlin.coroutines.EmptyCoroutineContext
import ${BASE_PACKAGE_NAME}.utils.extensions.e


abstract class BaseViewModel<S, E>(initState: S) : ViewModel() {
    private val _state = MutableStateFlow(initState)
    val state = _state.asStateFlow()

    private val _event = MutableSharedFlow<E?>()
    val event = _event.asSharedFlow()

    protected fun <T> tryToExecute(
        block: suspend () -> T,
        onSuccess: (T) -> Unit,
        onError: (ErrorState) -> Unit,
        checkSuccess: (T) -> Boolean = { true },
        inScope: CoroutineScope = viewModelScope
    ): Job {
        return inScope.launch(Dispatchers.IO) {
            runCatching { block() }
                .onSuccess { response ->
                    if (checkSuccess(response)) {
                        onSuccess(response)
                        return@onSuccess
                    }

                    onError(ErrorState.RequestFailed())
                }
                .onFailure { mapExceptionToErrorState(throwable = it, onError = onError) }
        }
    }

    protected fun <T> tryToCollect(
        block: suspend () -> Flow<T>,
        context: CoroutineContext = EmptyCoroutineContext,
        onNewValue: (T) -> Unit = {},
        onError: (ErrorState) -> Unit = {},
        onCompleted: () -> Unit = {},
        latest: Boolean = false,
        takeWhile: (T) -> Boolean = { true },
        inScope: CoroutineScope = viewModelScope
    ): Job = inScope.launch(context) {
        runCatching {
            if (latest)
                block()
                    .takeWhile(takeWhile)
                    .collectLatest(onNewValue)
            else
                block()
                    .takeWhile(takeWhile)
                    .collect(onNewValue)
        }
            .onFailure { mapExceptionToErrorState(throwable = it, onError = onError) }
        onCompleted()
    }

    protected fun updateState(notifyEvent: E? = null, updater: S.() -> S) {
        _state.update(updater)
        emitNewEvent(notifyEvent ?: return)
    }

    protected fun emitNewEvent(newEvent: E) {
        viewModelScope.launch(Dispatchers.IO) {
            _event.emit(newEvent)
            Logger.i("Event -> $newEvent")
        }
    }

    private inline fun <T> MutableStateFlow<T>.update(block: T.() -> T) {
        while (true) {
            val prevValue = value
            val nextValue = block(prevValue)
            if (compareAndSet(prevValue, nextValue))
                return
        }
    }

    protected fun <R> ViewModel.launchCatching(
        context: CoroutineContext = EmptyCoroutineContext,
        start: CoroutineStart = CoroutineStart.DEFAULT,
        onSuccess: (value: R) -> Unit = {},
        onFailure: (errorState: ErrorState) -> Unit = {},
        block: suspend CoroutineScope.() -> R,
    ): Job = viewModelScope.launch(context = context, start = start) {
        runCatching {
            block()
        }.onFailure(Logger::e)
            .onFailure { mapExceptionToErrorState(throwable = it, onError = onFailure) }
            .onSuccess(onSuccess)
    }

    private fun mapExceptionToErrorState(throwable: Throwable, onError: (ErrorState) -> Unit) {
        with(throwable) {
            when (this) {
                // TODO (Handle your exceptions)
                else -> ErrorState.RequestFailed().also { Logger.e(this) }
            }.run(onError)
        }
    }
}
